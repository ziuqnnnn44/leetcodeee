class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        int n = heights.length, m = heights[0].length;
        
        boolean[][]pacific = new boolean[n][m];
        boolean[][]atlantic = new boolean[n][m];
        
        for (int i = 0; i < n; i++) {
            dfs (heights, pacific,Integer.MIN_VALUE, i, 0); // 遍历最上行，接触太平洋
            dfs (heights, atlantic,Integer.MIN_VALUE, i, m - 1); // 遍历最下行，接触大西洋
        }

        // 从最左最右列的节点出发，向高处遍历
        for (int j = 0; j < m; j++) {
            dfs (heights, pacific,Integer.MIN_VALUE, 0, j); // 遍历最左列，接触太平洋
            dfs (heights, atlantic,Integer.MIN_VALUE, n - 1, j); // 遍历最右列，接触大西洋
        }
        for (int i = 0; i < n; i++) 
            for (int j = 0; j < m; j++) 
                if (pacific[i][j] && atlantic[i][j]) 
                    res.add(Arrays.asList(i,j));
        
        return res;
    }
    
    int[][]dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    
    public void dfs(int[][]matrix, boolean[][]visited, int height, int x, int y){
        int n = matrix.length, m = matrix[0].length;
        if(x<0 || x>=n || y<0 || y>=m || visited[x][y] || matrix[x][y] < height)
            return;
        visited[x][y] = true;
        for(int[]d:dir){
            dfs(matrix, visited, matrix[x][y], x+d[0], y+d[1]);
        }
    }
}
